# BloomBeta Flatpak package build specification
#
# Copyright (c) 2022 SIL International. MIT License.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

app-id: org.sil.BloomBeta

runtime: org.gnome.Platform
runtime-version: "41"
sdk: org.gnome.Sdk

finish-args:
    - --socket=x11
    - --share=ipc
    # Bloom can upload and download books on bloomlibrary.org.
    - --share=network
    # Bloom allows playing sound files and playing and recording in audio
    # writing systems.
    - --socket=pulseaudio
    # Bloom can import books and share folders over networks (either local or
    # via a mechanism like DropBox).  Users need to load pictures, sound files,
    # and videos from arbitrary locations.
    # Users need to be able to export books in various formats to arbitrary locations.
    - --filesystem=host
    # Bloom writes temporary folders and files to /tmp, to open in a browser to show
    # the user, such as creating PDFs,  ePUBs, or BloomPub ebooks.  Use the same /tmp
    # as the host, so the host programs can find the files.
    - --filesystem=/tmp

command: bloom-beta
rename-desktop-file: bloom-beta.desktop
rename-icon: bloom-beta

modules:
    ##    - name: libgdiplus0
    ##      sources:
    ##          - type: archive
    ##            url: https://download.mono-project.com/sources/libgdiplus/libgdiplus0-6.0.5.tar.gz
    ##            sha256: b81e4e5cc3e4831b2945de08bef26eb1bdcd795aeaf8f971b221c51213a025ef
    ##
    ##    - name: msbuild
    ##      sources:
    ##          - type: file
    ##            url: https://download.mono-project.com/repo/ubuntu/pool/main/m/msbuild/msbuild_16.6+xamarinxplat.2021.01.15.16.11-0xamarin1+debian10b1_all.deb
    ##            sha256: 300a0b2a10cd8a2f5555dc0c5db9b1127d2f24b274c8893984de8127cc68d7a4
    ##      buildsystem: simple
    ##      build-commands:
    ##          - ar x msbuild_*.deb
    ##          - tar xf data.tar.xz
    ##          - sed -e 's|/usr/|/usr/lib/sdk/mono6/|g' -i usr/bin/msbuild
    ##          - cp -a usr/. /usr/lib/sdk/mono6/
    ##
    ##    - name: mono-runtime
    ##      buildsystem: simple
    ##      build-options:
    ##          no-debuginfo: true
    ##          strip: true
    ##      build-commands:
    ##          # NOTE: THERE MAY BE MORE TO INSTALL MANUALLY THAN JUST WHAT WE HAVE HERE!
    ##          # not in gac for mono6, but in BloomExe.csproj? Microsoft.VisualBasic PresentationCore PresentationFramework WindowsFormsIntegration
    ##          - /usr/lib/sdk/mono6/install.sh CustomMarshalers ICSharpCode.SharpZipLib Microsoft.CSharp Mono.Data.Sqlite Mono.Messaging Mono.Security Mono.WebBrowser System.ComponentModel.Composition System.ComponentModel.DataAnnotations System.Configuration.Install System.Data System.Data.DataSetExtensions System.Design System.DirectoryServices System.Drawing System.EnterpriseServices System.IdentityModel System.IdentityModel.Selectors System.IO.Compression System.IO.Compression.FileSystem System.Management System.Messaging System.Net.Http System.Numerics System.Numerics.Vectors System.Runtime.Serialization System.Runtime.Serialization.Formatters.Soap System.Security System.ServiceModel System.ServiceModel.Activation System.ServiceModel.Internals System.Transactions System.Web System.Web.ApplicationServices System.Web.Extensions System.Web.Services System.Windows.Forms System.Xaml System.Xml.Linq WindowsBase
    ##          - install -d /app/lib/mono/4.5/Facades /app/lib/mono/4.7.1-api/Facades /app/lib/mono/4.7.2-api/Facades
    ##          - cp /usr/lib/sdk/mono6/lib/mono/4.5/Facades/{netstandard.dll,System.ValueTuple.dll,System.Threading.Tasks.dll} /app/lib/mono/4.5/Facades
    ##          - cp /usr/lib/sdk/mono6/lib/mono/4.7.1-api/Facades/{netstandard.dll,System.ValueTuple.dll,System.Threading.Tasks.dll} /app/lib/mono/4.7.1-api/Facades
    ##          - cp /usr/lib/sdk/mono6/lib/mono/4.7.2-api/Facades/{netstandard.dll,System.ValueTuple.dll,System.Threading.Tasks.dll} /app/lib/mono/4.7.2-api/Facades
    ##          - cp /usr/lib/sdk/mono6/lib/mono/4.5/cert-sync.exe /app/lib/mono/4.5/
    ##          - cp /usr/lib/sdk/mono6/bin/cert-sync /app/bin/
    ##          - sed -i 's|/usr/lib/sdk/mono6/|/app/|g' /app/bin/cert-sync
    ##
    - name: BloomDesktop
      buildsystem: simple
      build-options:
          env:
              MONO_PREFIX: "/app"
              MONO_SILPKGDIR: "/app"
              NUGET_DEST: "BloomDesktop/packages"
              INSTALLATION_PREFIX: "/app"
              RUNMODE: "PACKAGING"
              XDG_CACHE_HOME: /run/build/flatpak-node/cache
              BLOOMLIB: "/app/lib/bloom-desktop-beta"
              BLOOMSHARE: "/app/share/bloom-desktop-beta"
              PREFIX: "/app"
              PERL5LIB: "/app/perl-modules/lib/perl5"
              BUILD_CONFIG: "Release"
      #          append-path: "/usr/lib/sdk/node16/bin:/usr/lib/sdk/mono6/bin"
      #          append-ld-library-path: /usr/lib/sdk/mono6/lib
      #          append-pkg-config-path: /usr/lib/sdk/mono6/lib/pkgconfig
      build-commands:
          - |
              set -xueo pipefail
              yarn config set yarn-offline-mirror `pwd`/flatpak-node/yarn-mirror
              which msbuild
              which mono
              mono --version
              cd BloomDesktop
              pwd && ls -FC
              export NODE_OPTIONS=--max-old-space-size=1536
              if [ -f ./build_number.env ]; then . ./build_number.env; else FULL_BUILD_NUMBER=5.2.1.0; fi
              (cd src/BloomBrowserUI && yarn config list && yarn install --offline --ignore-engines && yarn build --offline --ignore-engines)
              msbuild /t:SetAssemblyVersion /p:RootDir=`pwd` /p:BUILD_NUMBER=${FULL_BUILD_NUMBER} build/Bloom.proj
              msbuild /p:Configuration=Release /p:BUILD_NUMBER=${FULL_BUILD_NUMBER} "Bloom.sln"
              msbuild /p:Configuration=Release /p:BUILD_NUMBER=${FULL_BUILD_NUMBER} src/LinuxBloomLauncher/LinuxBloomLauncher.cproj
              ##################################################################################################################
              # mimic the installation steps used by the debian packaging
              # Install library files
              install -d ${BLOOMLIB}
              cp -rv output/Release/* ${BLOOMLIB}
              find ${BLOOMLIB} -type f -print0 | xargs -0 chmod 644
              chmod +x ${BLOOMLIB}/BloomLauncher
              chmod +x ${BLOOMLIB}/*.sh
              chmod +x ${BLOOMLIB}/*.exe
              find ${BLOOMLIB} -type d -print0 | xargs -0 chmod 755
              install -d ${BLOOMSHARE}
              install -m 644 environ* ${BLOOMSHARE}
              # Install data files
              cp -r DistFiles/* ${BLOOMLIB}
              chmod -R a+rX,og-w ${BLOOMLIB}
              # Install browser support files
              cp -r output/browser ${BLOOMLIB}
              chmod -R a+rX,og-w ${BLOOMLIB}/browser
              # Install wrapper script
              install -d ${INSTALLATION_PREFIX}/bin
              install debian/bloom-beta ${INSTALLATION_PREFIX}/bin
              # Add to Applications menu
              install -d ${INSTALLATION_PREFIX}/share/pixmaps
              install -m 644 debian/bloom.png ${INSTALLATION_PREFIX}/share/pixmaps/bloom-beta.png
              install -m 644 debian/bloom.svg ${INSTALLATION_PREFIX}/share/pixmaps/bloom-beta.svg
              install -d ${INSTALLATION_PREFIX}/share/applications
              desktop-file-install --dir ${INSTALLATION_PREFIX}/share/applications debian/bloom-beta.desktop
              # Install icon for our mime type so that it shows up as icon for a bloompack
              # NOTE: mime type installation is handled by dh_installmime
              install -d ${INSTALLATION_PREFIX}/share/icons/hicolor/48x48/mimetypes/
              install -m 644 debian/BloomPack.png ${INSTALLATION_PREFIX}/share/icons/hicolor/48x48/mimetypes/application-bloom.png
              install -m 644 debian/BloomPack.png ${INSTALLATION_PREFIX}/share/icons/hicolor/48x48/mimetypes/bloom-beta.png
              install -d ${INSTALLATION_PREFIX}/share/icons/hicolor/scalable/mimetypes/
              install -m 644 debian/BloomPack.svg ${INSTALLATION_PREFIX}/share/icons/hicolor/scalable/mimetypes/application-bloom.svg
              install -m 644 debian/BloomPack.svg ${INSTALLATION_PREFIX}/share/icons/hicolor/scalable/mimetypes/bloom-beta.svg
              # Add bloom-collection mime type
              install -m 644 debian/bloom-collection.png ${INSTALLATION_PREFIX}/share/icons/hicolor/48x48/mimetypes/application-bloom-collection.png
              install -m 644 debian/bloom-collection.svg ${INSTALLATION_PREFIX}/share/icons/hicolor/scalable/mimetypes/application-bloom-collection.svg
              # Add bloom-join-team mime type
              install -m 644 debian/JoinBloomTC.png ${INSTALLATION_PREFIX}/share/icons/hicolor/48x48/mimetypes/application-bloom-join-team.png
              install -m 644 debian/JoinBloomTC.svg ${INSTALLATION_PREFIX}/share/icons/hicolor/scalable/mimetypes/application-bloom-join-team.svg
              # Add AppStream metadata file
              # REVIEW: the specs are not completely clear where the file should go: /usr/share/appdata,
              # /usr/share/app-info/xmls, or /usr/share/metainfo.
              install -d ${INSTALLATION_PREFIX}/share/appdata
              install -m 644 debian/bloom-beta.appdata.xml ${INSTALLATION_PREFIX}/share/appdata
              # Remove unwanted files
              cd ${BLOOMLIB} && rm -rf AxInterop* BloomTests* Interop* Moq* nunit* NUnit* AndikaNewBasic ffmpeg ghostscript
              find ${BLOOMLIB} -name '*.map' -print0 | xargs -0 rm -f
              find ${BLOOMLIB} -name '*Spec.js' -print0 | xargs -0 rm -f
              find ${BLOOMLIB} -name 'CheckOrFixXliff.*' -print0 | xargs -0 rm -f
              find ${BLOOMLIB} -name 'GeckofxHtmlToPdf.*' -print0 | xargs -0 rm -f
              find ${BLOOMLIB} -name '*UnitTestFramework.dll' -type d -print0 | xargs -0 rm -rf
              find ${BLOOMLIB} -name 'Moq.*' -print0 | xargs -0 rm -f
              # We need NAudio.dll for SIL.Media to load even though it's Windows-only.  But we don't need the xml file.
              find ${BLOOMLIB} -name 'NAudio.xml' -print0 | xargs -0 rm -f
              find ${BLOOMLIB} -name 'irrKlang.NET4.dll' -print0 | xargs -0 rm -f
              find ${BLOOMLIB} -name 'win-x86' -type d -print0 | xargs -0 rm -rf
              find ${BLOOMLIB} -name 'win-x64' -type d -print0 | xargs -0 rm -rf
              find ${BLOOMLIB} -name '*Interop.AcroPDFLib.*' -print0 | xargs -0 rm -f
              # These are needed to compile libpalaso on Windows, but aren't really used even there I suspect.
              find ${BLOOMLIB} -name 'AtkSharp.dll' -print0 | xargs -0 rm -f
              find ${BLOOMLIB} -name 'CairoSharp.dll' -print0 | xargs -0 rm -f
              find ${BLOOMLIB} -name 'GdkSharp.dll' -print0 | xargs -0 rm -f
              find ${BLOOMLIB} -name 'GioSharp.dll' -print0 | xargs -0 rm -f
              find ${BLOOMLIB} -name 'GLibSharp.dll' -print0 | xargs -0 rm -f
              find ${BLOOMLIB} -name 'GtkSharp.dll' -print0 | xargs -0 rm -f
              find ${BLOOMLIB} -name 'PangoSharp.dll' -print0 | xargs -0 rm -f
      cleanup:
          - "/include"
          - "/lib/*/include"
          - "*.a"
      sources:
          - type: git
            dest: BloomDesktop
            url: https://github.com/BloomBooks/BloomDesktop.git
            branch: Version5.2
          # Bloom nuget dependencies
          # To regenerate bloom-build-sources-nuget.yml:
          #   ./compose-nuget-sources bloom-build-sources-nuget.yml . ./buildPackages.config
          - bloom-build-nuget-sources.yml
          # To regenerate bloom-sources-nuget.yml:
          #   ./compose-nuget-sources bloom-sources-nuget.yml . ../src/BloomExe/Linux/packages.config
          - bloom-sources-nuget.yml
          - type: shell
            # Extract nuget packages. The 'type: archive', 'archive-type: zip' had
            # some trouble working, so manually extract.
            commands:
                - |
                    for package in *.nupkg; do
                      mkdir -p "${NUGET_DEST}/$(basename "${package}" .nupkg)" &&
                        unzip "${package}" \
                          -d "${NUGET_DEST}/$(basename "${package}" .nupkg)"
                    done
                    # repair damaged nupkgs
                    mv "${NUGET_DEST}/MarkdownDeep.NET.1.5.0/lib/.NetFramework%203.5" "${NUGET_DEST}/MarkdownDeep.NET.1.5.0/lib/.NetFramework 3.5"
                    chmod 755 "${NUGET_DEST}"/sqlite-net-pcl.1.7.335/*.*
                    chmod 755 "${NUGET_DEST}"/sqlite-net-pcl.1.7.335/lib/netstandard2.0/SQLite-net.*
          # Bloom dependencies
          # Find updates via FieldWorks.git with a command like:
          #   git log -p -- src/build/getDependencies-Linux.sh
          # Manually apply changes by editing bloom-sources-urls-input.yml.
          # Regenerate input sources:
          #   ./compose-url-sources bloom-sources-urls-input.yml bloom-sources-urls.yml
          - bloom-sources-urls.yml
          - type: shell
            # Extract files from pdf.js zipfile.
            commands:
                - |
                    mkdir -p "DistFiles/pdf" && unzip -uqo BloomDesktop/Downloads/pdfjs-viewer.zip -d "BloomDesktop/DistFiles/pdf"
          # python3 flatpak-builder-tools/node/flatpak-node-generator.py -o bloom-sources-browser-node.json yarn ../src/BloomBrowserUI/yarn.lock
          - bloom-sources-browser-node.json
          - type: patch
            path: patches/BloomDesktop/FixesForFlatpak.patch
            options:
                - --verbose
      modules:
          - name: node
            sources:
                - type: archive
                  url: https://nodejs.org/dist/v16.13.1/node-v16.13.1.tar.xz
                  sha256: 4c23004fd75eaf799ad8e76fe34f53e0327f433d4acbfc883396f72e96cc63ad
                  x-checker-data:
                      type: json
                      url: https://nodejs.org/dist/index.json
                      tag-query: >-
                          map(select(.version|startswith("v16."))) | sort_by(.date) | last | .version
                      version-query: >-
                          $tag | sub("^[vV]"; "")
                      url-query: >-
                          "https://nodejs.org/dist/\($tag)/node-\($tag).tar.xz"
                      is-main-source: true
            config-opts:
                - --openssl-use-def-ca-store
                - --shared-openssl
                - --shared-zlib
                - --with-intl=system-icu

          - name: yarn
            buildsystem: simple
            build-commands:
                - mkdir -p ${FLATPAK_DEST}/{bin,share}
                - cp -a . ${FLATPAK_DEST}/share/yarn
                - ln -sr ${FLATPAK_DEST}/share/yarn/bin/yarn ${FLATPAK_DEST}/bin/yarn
                - ln -sr ${FLATPAK_DEST}/share/yarn/bin/yarnpkg ${FLATPAK_DEST}/bin/yarnpkg
            sources:
                - type: archive
                  url: https://github.com/yarnpkg/yarn/releases/download/v1.22.18/yarn-v1.22.18.tar.gz
                  sha256: 816e5c073b3d35936a398d1fe769ebbcd517298e3510b649e8fc67cd3a62e113
                  x-checker-data:
                      type: json
                      url: https://api.github.com/repos/yarnpkg/yarn/releases/latest
                      version-query: >-
                          .tag_name | sub("^[vV]"; "")
                      url-query: >-
                          .assets | map(select(.name|endswith(".tar.gz"))) | first | .browser_download_url

          - name: mono5-sil
            cleanup:
                # Not cleaning away lib/mono/4.5/mcs* because mcs.exe is used in SFM import.
                - "/include"
                - "*.a"
                - "/bin/gtk-demo"
                - "/bin/monodis"
                - "/bin/monograph"
                - "/bin/pedump"
                - "/lib/mono/2*"
                - "/lib/mono/3*"
                - "/lib/mono/4.5/dim"
                - "/lib/mono/4.5/Microsoft.CodeAnalysis.*"
                - "/lib/mono/gac/Microsoft.Build.Engine"
                - "/lib/mono/gac/Microsoft.Build"
                - "/lib/mono/gac/monodoc"
                - "/lib/mono/msbuild"
                - "/lib/mono/xbuild-frameworks"
                - "/lib/mono/xbuild"
                - "/lib/monodoc"
            sources:
                - type: git
                  url: https://github.com/sillsdev/mono.git
                  # Past sil/5.16.0.179
                  commit: 2672d16f8b3006a574a0108b6c324d7a090678b5
                - type: archive
                  # Update URL by doing: cd .../path/to/mono-repo && .../determine-monolite-url
                  url: https://download.mono-project.com/monolite/monolite-linux-1051600011-latest.tar.gz
                  sha512: b48bb273f5a9107f9bb9795d47277aeaaeb458588a6e011676bb9a152b83759f305cf1031a5e74a62145854ef17026cb1aa20ea9adb5e6b15f275b9d6af585db
                  dest: mcs/class/lib/monolite-linux/1051600011
                - type: patch
                  # mono uses a hard-coded path to ping. Help it find ping in /app.
                  path: patches/mono/mono-ping-path.patch
            modules:
                - name: python-2.7
                  # Build Python 2 without cleaning away parts that we still need,
                  # like shared-modules/python2.7 does.
                  config-opts:
                      - --enable-shared
                      - --with-system-expat
                      - --with-system-ffi
                      - --enable-unicode=ucs4
                  post-install:
                      - chmod 644 ${FLATPAK_DEST}/lib/libpython2.7.so.1.0
                  cleanup:
                      - "/lib/python2.7/test"
                      - "/lib/python2.7/unittest"
                      - "/lib/python2.7/distutils/tests"
                      - "/lib/python2.7/idlelib/idle_test"
                      - "/lib/python2.7/lib2to3"
                      - "/include"
                      - "*.a"
                      - "*.o"
                  sources:
                      - type: archive
                        url: https://www.python.org/ftp/python/2.7.18/Python-2.7.18.tar.xz
                        sha256: b62c0e7937551d0cc02b8fd5cb0f544f9405bafc9a54d3808ed4594812edef43
          - name: gtk-sharp
            config-opts:
                - --disable-gtk-doc
                - --disable-man
            cleanup:
                - "/lib/monodoc"
                - "/include"
                - "*.a"
            sources:
                - type: git
                  url: https://github.com/sillsdev/gtk-sharp.git
                  # Branch develop
                  commit: fcf1dd40d4892be309dd450bcda2026ddece4480
                - type: script
                  commands:
                      - NOCONFIGURE=1 ./bootstrap-2.12
          - name: mono5-sil-msbuild
            # It was challenging to build msbuild from source. Other projects
            # appear to fetch binaries rather than build msbuild. Following that.
            buildsystem: simple
            build-commands:
                # Extract opt/mono5-sil/* into /app/
                - |
                    for package in *.deb; do
                      mkdir "${package}-dir" &&
                        (cd "${package}-dir" && ar x ../"${package}") &&
                        tar -C /app -x -f "${package}-dir"/data.tar.xz \
                          --strip-components=3 ./opt/mono5-sil
                    done
                # Use same-character-count path to /app since some binary files are
                # going to be modified too.
                - perl -pi -e 's#/opt/mono5-sil#/./././././app#g' /app/bin/*
            cleanup:
                # Can't clean '*' because that seems to result in /app/bin/mono being
                # absent.
                - "/lib/mono/msbuild"
                - "/lib/mono/xbuild"
            sources:
                - type: file
                  url: http://linux.lsdev.sil.org/ubuntu/pool/main/m/mono5-sil-msbuild/mono5-sil-msbuild_15.8+xamarinxplat.2018.07.31.22.43-0xamarin5+ubuntu1804b1_all.deb
                  sha256: 758274d8bc438f325fc5fc808c0482ab50eb2bdaf02f61747888e190760753de
          - name: libgdiplus
            build-options:
                prefix: /app
                env:
                    MONO_PREFIX: /app
            config-opts:
                - --with-pango
            cleanup:
                - "/include"
                - "*.a"
            sources:
                - type: git
                  url: https://github.com/sillsdev/libgdiplus
                  tag: merge/5.6.0
                  commit: b9c581ba87da89651d5ec56c5da0960ab739a63a
            modules:
                - name: giflib
                  buildsystem: simple
                  build-commands:
                      # Skip building documentation
                      - perl -pi -e 's#doc/Makefile##' configure.ac
                      - ./autogen.sh --prefix=/app
                      - make
                      - make install
                  cleanup:
                      - "/include"
                      - "*.a"
                  sources:
                      - type: git
                        url: https://github.com/mirrorer/giflib.git
                        commit: fa37672085ce4b3d62c51627ab3c8cf2dda8009a
                        # Note that libgdiplus needs giflib to have GifQuantizeBuffer.
                        # Some giflibs need adjustment to have that built in.
          - name: xchm
            # Help file viewer
            cleanup:
                - "/include"
                - "*.a"
                - "/share/icons"
                - "/share/applications"
            sources:
                - type: git
                  url: https://github.com/rzvncj/xCHM
                  # Version 1.31 is used in Ubuntu 20.04.
                  tag: "1.31"
                  commit: e983d11fd546c961501f736b2c6f93178c92fa97
                - type: patch
                  # xchm would otherwise need to write to files ~/.xchmXXXXXX and
                  # ~/.xchm. This won't be needed after upgrading to a newer xchm
                  # version and wxWidgets v3.1.1+.
                  path: patches/xchm/no-config.patch
            modules:
                - name: chmlib
                  cleanup:
                      - "/include"
                      - "*.a"
                  sources:
                      - type: git
                        url: https://github.com/jedwing/CHMLib
                        # Latest commit, from 2009-07-03.
                        commit: 2bef8d063ec7d88a8de6fd9f0513ea42ac0fa21f
                      - type: script
                        commands:
                            - autoreconf --install
                - name: wxWidgets
                  cleanup:
                      - "/include"
                      - "/lib/wx/include"
                      - "*.a"
                  sources:
                      - type: git
                        url: https://github.com/wxWidgets/wxWidgets
                        # v3.0.4 is used in Ubuntu 20.04.
                        # v3.1.1+ is needed for xchm to write to XDG_CONFIG_HOME.
                        # However, v3.1.0 appears to introduce a problem rendering the
                        # chm html. v3.0.5.1 still worked, rendering the html.
                        tag: v3.0.4
                        commit: 721d62adde3f8ba8704a9cf56efeb050f652dfbf

          - name: wget
            buildsystem: autotools
            cleanup:
                # Don't ship.
                - "*"
            sources:
                - type: archive
                  url: https://ftp.gnu.org/gnu/wget/wget-1.20.3.tar.gz
                  sha512: e8b82b40e270296228094a78d47f81580bdbdea9e6b93fd61b37dccb39430aeb9bda5397dc53a31c952a61629383c7e2a8c8abf414c8a4dd369af6ecf2717e6c

          - name: dbus-glib
            # For Gecko.
            cleanup:
                - "/share/gtk-doc"
                - "/include"
                - "*.a"
            sources:
                - type: git
                  url: https://gitlab.freedesktop.org/dbus/dbus-glib.git
                  tag: dbus-glib-0.110
                  commit: ffeb6909967ff79585a7ede85227da94f04ecb01

          - name: fonts-sil-andika-new-basic
            # From https://software.sil.org/andika/download/
            buildsystem: simple
            build-commands:
                - mkdir -p /app/share/fonts/truetype/andika-new-basic
                - cp -a *.ttf /app/share/fonts/truetype/andika-new-basic
            sources:
                - type: archive
                  url: https://software.sil.org/downloads/r/andika/AndikaNewBasic-5.500.zip
                  sha512: 53513c782889fd7e87903cab43f1e419a87cfbc425fd722b621cbdb1b1928584b5ce82ecc56e6f6aa1073ed30268993c46c451dfd8b198b430a54a5cf1eb10a1
##          - name: gtk-sharp3
##            sources:
##                - type: git
##                  url: https://github.com/mono/gtk-sharp.git
##                  commit: dadc19cf1b90c5743f2776c675faac990e397a56
#      - name: wmctrl
#        # missing #include <X11/Xmu/WinUtil.h>
#        buildsystem: autotools
#        sources:
#          - type: git
#            url: https://github.com/Conservatory/wmctrl.git
#            commit: 7c1dcbaa221a16e8a9765bf2b14d61d640a52304
#
#      - name: gtklp
#        # requires gtk+-2.0, which is too old to be provided
#        buildsystem: autotools
#        sources:
#          - type: archive
#            archive-type: tar-gzip
#            url: https://sourceforge.net/projects/gtklp/files/gtklp/1.3.3/gtklp-1.3.3.src.tar.gz/download
#            sha512: ce6d37fa155857b0e47f9ed28e3b2e5180b650e821e1246d398692625e8aafeedf4869c1c7ba9d41c180856c716989a13ac98ab48cb8c8f9a73e90c4da2c6546

############################################################################################
# libtidy-sil
# ghostscript -- https://github.com/search?q=org%3Aflathub+ghostscript&type=code
# graphicsmagick
# otfinfo (lcdf-typetools)
# python3-aeneas
############################################################################################
